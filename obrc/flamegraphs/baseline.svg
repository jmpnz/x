<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="689458"><g><title>obrc`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (1,013 samples, 0.15%)</title><rect x="0.0001%" y="245" width="0.1469%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1013"/><text x="0.2501%" y="255.50"></text></g><g><title>obrc`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (213 samples, 0.03%)</title><rect x="0.1475%" y="245" width="0.0309%" height="15" fill="rgb(217,0,24)" fg:x="1017" fg:w="213"/><text x="0.3975%" y="255.50"></text></g><g><title>obrc`core::iter::traits::iterator::Iterator::collect (487 samples, 0.07%)</title><rect x="0.1784%" y="245" width="0.0706%" height="15" fill="rgb(221,193,54)" fg:x="1230" fg:w="487"/><text x="0.4284%" y="255.50"></text></g><g><title>obrc`core::result::Result&lt;T,E&gt;::is_ok (816 samples, 0.12%)</title><rect x="0.2543%" y="245" width="0.1184%" height="15" fill="rgb(248,212,6)" fg:x="1753" fg:w="816"/><text x="0.5043%" y="255.50"></text></g><g><title>obrc`core::str::_&lt;impl str&gt;::split (238 samples, 0.03%)</title><rect x="0.3815%" y="245" width="0.0345%" height="15" fill="rgb(208,68,35)" fg:x="2630" fg:w="238"/><text x="0.6315%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5,870 samples, 0.85%)</title><rect x="1.6191%" y="229" width="0.8514%" height="15" fill="rgb(232,128,0)" fg:x="11163" fg:w="5870"/><text x="1.8691%" y="239.50"></text></g><g><title>obrc`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,970 samples, 1.01%)</title><rect x="2.4763%" y="229" width="1.0109%" height="15" fill="rgb(207,160,47)" fg:x="17073" fg:w="6970"/><text x="2.7263%" y="239.50"></text></g><g><title>obrc`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (11,554 samples, 1.68%)</title><rect x="3.4872%" y="229" width="1.6758%" height="15" fill="rgb(228,23,34)" fg:x="24043" fg:w="11554"/><text x="3.7372%" y="239.50"></text></g><g><title>obrc`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,780 samples, 0.55%)</title><rect x="4.6148%" y="213" width="0.5483%" height="15" fill="rgb(218,30,26)" fg:x="31817" fg:w="3780"/><text x="4.8648%" y="223.50"></text></g><g><title>obrc`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (8,978 samples, 1.30%)</title><rect x="9.9000%" y="197" width="1.3022%" height="15" fill="rgb(220,122,19)" fg:x="68256" fg:w="8978"/><text x="10.1500%" y="207.50"></text></g><g><title>obrc`alloc::string::String::pop (22,396 samples, 3.25%)</title><rect x="8.3377%" y="213" width="3.2483%" height="15" fill="rgb(250,228,42)" fg:x="57485" fg:w="22396"/><text x="8.5877%" y="223.50">obr..</text></g><g><title>obrc`core::str::validations::next_code_point_reverse (2,647 samples, 0.38%)</title><rect x="11.2021%" y="197" width="0.3839%" height="15" fill="rgb(240,193,28)" fg:x="77234" fg:w="2647"/><text x="11.4521%" y="207.50"></text></g><g><title>obrc`core::char::methods::encode_utf8_raw (28,420 samples, 4.12%)</title><rect x="11.5861%" y="213" width="4.1221%" height="15" fill="rgb(216,20,37)" fg:x="79881" fg:w="28420"/><text x="11.8361%" y="223.50">obrc..</text></g><g><title>obrc`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (13,759 samples, 2.00%)</title><rect x="13.7125%" y="197" width="1.9956%" height="15" fill="rgb(206,188,39)" fg:x="94542" fg:w="13759"/><text x="13.9625%" y="207.50">o..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2,520 samples, 0.37%)</title><rect x="17.9264%" y="197" width="0.3655%" height="15" fill="rgb(217,207,13)" fg:x="123595" fg:w="2520"/><text x="18.1764%" y="207.50"></text></g><g><title>obrc`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6,328 samples, 0.92%)</title><rect x="18.2919%" y="197" width="0.9178%" height="15" fill="rgb(231,73,38)" fg:x="126115" fg:w="6328"/><text x="18.5419%" y="207.50"></text></g><g><title>obrc`core::slice::_&lt;impl [T]&gt;::ends_with (24,815 samples, 3.60%)</title><rect x="15.7081%" y="213" width="3.5992%" height="15" fill="rgb(225,20,46)" fg:x="108301" fg:w="24815"/><text x="15.9581%" y="223.50">obrc..</text></g><g><title>obrc`DYLD-STUB$$memcmp (673 samples, 0.10%)</title><rect x="19.2097%" y="197" width="0.0976%" height="15" fill="rgb(210,31,41)" fg:x="132443" fg:w="673"/><text x="19.4597%" y="207.50"></text></g><g><title>obrc`core::str::converts::from_utf8 (4,274 samples, 0.62%)</title><rect x="19.7916%" y="197" width="0.6199%" height="15" fill="rgb(221,200,47)" fg:x="136455" fg:w="4274"/><text x="20.0416%" y="207.50"></text></g><g><title>obrc`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (11,093 samples, 1.61%)</title><rect x="21.0812%" y="181" width="1.6089%" height="15" fill="rgb(226,26,5)" fg:x="145346" fg:w="11093"/><text x="21.3312%" y="191.50"></text></g><g><title>obrc`&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8,510 samples, 1.23%)</title><rect x="21.4558%" y="165" width="1.2343%" height="15" fill="rgb(249,33,26)" fg:x="147929" fg:w="8510"/><text x="21.7058%" y="175.50"></text></g><g><title>obrc`&lt;std::io::Guard as core::ops::drop::Drop&gt;::drop (258 samples, 0.04%)</title><rect x="22.6920%" y="181" width="0.0374%" height="15" fill="rgb(235,183,28)" fg:x="156452" fg:w="258"/><text x="22.9420%" y="191.50"></text></g><g><title>obrc`core::ptr::drop_in_place&lt;std::io::Guard&gt; (485 samples, 0.07%)</title><rect x="22.7294%" y="181" width="0.0703%" height="15" fill="rgb(221,5,38)" fg:x="156710" fg:w="485"/><text x="22.9794%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr (3,398 samples, 0.49%)</title><rect x="23.4114%" y="149" width="0.4929%" height="15" fill="rgb(247,18,42)" fg:x="161412" fg:w="3398"/><text x="23.6614%" y="159.50"></text></g><g><title>obrc`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (449 samples, 0.07%)</title><rect x="23.9043%" y="149" width="0.0651%" height="15" fill="rgb(241,131,45)" fg:x="164810" fg:w="449"/><text x="24.1543%" y="159.50"></text></g><g><title>obrc`&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5,258 samples, 0.76%)</title><rect x="23.9694%" y="149" width="0.7626%" height="15" fill="rgb(249,31,29)" fg:x="165259" fg:w="5258"/><text x="24.2194%" y="159.50"></text></g><g><title>obrc`&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,526 samples, 0.51%)</title><rect x="24.2206%" y="133" width="0.5114%" height="15" fill="rgb(225,111,53)" fg:x="166991" fg:w="3526"/><text x="24.4706%" y="143.50"></text></g><g><title>obrc`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (1,504 samples, 0.22%)</title><rect x="25.8808%" y="117" width="0.2181%" height="15" fill="rgb(238,160,17)" fg:x="178437" fg:w="1504"/><text x="26.1308%" y="127.50"></text></g><g><title>obrc`core::cmp::min_by (9,976 samples, 1.45%)</title><rect x="24.8115%" y="133" width="1.4469%" height="15" fill="rgb(214,148,48)" fg:x="171065" fg:w="9976"/><text x="25.0615%" y="143.50"></text></g><g><title>obrc`core::ops::function::FnOnce::call_once (1,100 samples, 0.16%)</title><rect x="26.0989%" y="117" width="0.1595%" height="15" fill="rgb(232,36,49)" fg:x="179941" fg:w="1100"/><text x="26.3489%" y="127.50"></text></g><g><title>obrc`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (10,577 samples, 1.53%)</title><rect x="24.7320%" y="149" width="1.5341%" height="15" fill="rgb(209,103,24)" fg:x="170517" fg:w="10577"/><text x="24.9820%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (2,152 samples, 0.31%)</title><rect x="27.5847%" y="101" width="0.3121%" height="15" fill="rgb(229,88,8)" fg:x="190185" fg:w="2152"/><text x="27.8347%" y="111.50"></text></g><g><title>obrc`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (11,244 samples, 1.63%)</title><rect x="26.2661%" y="149" width="1.6308%" height="15" fill="rgb(213,181,19)" fg:x="181094" fg:w="11244"/><text x="26.5161%" y="159.50"></text></g><g><title>obrc`std::io::buffered::bufreader::buffer::Buffer::fill_buf (10,774 samples, 1.56%)</title><rect x="26.3343%" y="133" width="1.5627%" height="15" fill="rgb(254,191,54)" fg:x="181564" fg:w="10774"/><text x="26.5843%" y="143.50"></text></g><g><title>obrc`std::io::impls::_&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (2,154 samples, 0.31%)</title><rect x="27.5846%" y="117" width="0.3124%" height="15" fill="rgb(241,83,37)" fg:x="190184" fg:w="2154"/><text x="27.8346%" y="127.50"></text></g><g><title>obrc`DYLD-STUB$$memchr (239 samples, 0.03%)</title><rect x="27.8970%" y="149" width="0.0347%" height="15" fill="rgb(233,36,39)" fg:x="192338" fg:w="239"/><text x="28.1470%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6,530 samples, 0.95%)</title><rect x="28.3660%" y="133" width="0.9471%" height="15" fill="rgb(226,3,54)" fg:x="195572" fg:w="6530"/><text x="28.6160%" y="143.50"></text></g><g><title>obrc`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (469 samples, 0.07%)</title><rect x="31.4338%" y="101" width="0.0680%" height="15" fill="rgb(245,192,40)" fg:x="216723" fg:w="469"/><text x="31.6838%" y="111.50"></text></g><g><title>obrc`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1,237 samples, 0.18%)</title><rect x="31.5485%" y="85" width="0.1794%" height="15" fill="rgb(238,167,29)" fg:x="217514" fg:w="1237"/><text x="31.7985%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,552 samples, 0.23%)</title><rect x="34.5394%" y="37" width="0.2251%" height="15" fill="rgb(232,182,51)" fg:x="238135" fg:w="1552"/><text x="34.7894%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2,906 samples, 0.42%)</title><rect x="34.7679%" y="37" width="0.4215%" height="15" fill="rgb(231,60,39)" fg:x="239710" fg:w="2906"/><text x="35.0179%" y="47.50"></text></g><g><title>obrc`DYLD-STUB$$malloc (286 samples, 0.04%)</title><rect x="35.1894%" y="37" width="0.0415%" height="15" fill="rgb(208,69,12)" fg:x="242616" fg:w="286"/><text x="35.4394%" y="47.50"></text></g><g><title>obrc`__rdl_alloc (246 samples, 0.04%)</title><rect x="35.2309%" y="37" width="0.0357%" height="15" fill="rgb(235,93,37)" fg:x="242902" fg:w="246"/><text x="35.4809%" y="47.50"></text></g><g><title>obrc`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13,501 samples, 1.96%)</title><rect x="34.4929%" y="53" width="1.9582%" height="15" fill="rgb(213,116,39)" fg:x="237814" fg:w="13501"/><text x="34.7429%" y="63.50">o..</text></g><g><title>obrc`alloc::alloc::Global::alloc_impl (8,164 samples, 1.18%)</title><rect x="35.2670%" y="37" width="1.1841%" height="15" fill="rgb(222,207,29)" fg:x="243151" fg:w="8164"/><text x="35.5170%" y="47.50"></text></g><g><title>obrc`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (84 samples, 0.01%)</title><rect x="36.4511%" y="53" width="0.0122%" height="15" fill="rgb(206,96,30)" fg:x="251315" fg:w="84"/><text x="36.7011%" y="63.50"></text></g><g><title>obrc`alloc::alloc::Global::grow_impl (76 samples, 0.01%)</title><rect x="36.4523%" y="37" width="0.0110%" height="15" fill="rgb(218,138,4)" fg:x="251323" fg:w="76"/><text x="36.7023%" y="47.50"></text></g><g><title>obrc`alloc::alloc::Global::alloc_impl (552 samples, 0.08%)</title><rect x="36.4633%" y="53" width="0.0801%" height="15" fill="rgb(250,191,14)" fg:x="251399" fg:w="552"/><text x="36.7133%" y="63.50"></text></g><g><title>obrc`alloc::raw_vec::finish_grow (25,472 samples, 3.69%)</title><rect x="33.6284%" y="69" width="3.6945%" height="15" fill="rgb(239,60,40)" fg:x="231854" fg:w="25472"/><text x="33.8784%" y="79.50">obrc..</text></g><g><title>obrc`core::result::Result&lt;T,E&gt;::map_err (5,374 samples, 0.78%)</title><rect x="36.5435%" y="53" width="0.7795%" height="15" fill="rgb(206,27,48)" fg:x="251952" fg:w="5374"/><text x="36.7935%" y="63.50"></text></g><g><title>obrc`core::alloc::layout::Layout::array::inner (4,898 samples, 0.71%)</title><rect x="37.3229%" y="69" width="0.7104%" height="15" fill="rgb(225,35,8)" fg:x="257326" fg:w="4898"/><text x="37.5729%" y="79.50"></text></g><g><title>obrc`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (1,768 samples, 0.26%)</title><rect x="38.7110%" y="53" width="0.2564%" height="15" fill="rgb(250,213,24)" fg:x="266896" fg:w="1768"/><text x="38.9610%" y="63.50"></text></g><g><title>obrc`core::cmp::max_by (7,701 samples, 1.12%)</title><rect x="38.0334%" y="69" width="1.1170%" height="15" fill="rgb(247,123,22)" fg:x="262224" fg:w="7701"/><text x="38.2834%" y="79.50"></text></g><g><title>obrc`core::ops::function::FnOnce::call_once (1,261 samples, 0.18%)</title><rect x="38.9674%" y="53" width="0.1829%" height="15" fill="rgb(231,138,38)" fg:x="268664" fg:w="1261"/><text x="39.2174%" y="63.50"></text></g><g><title>obrc`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (51,180 samples, 7.42%)</title><rect x="31.7280%" y="85" width="7.4232%" height="15" fill="rgb(231,145,46)" fg:x="218751" fg:w="51180"/><text x="31.9780%" y="95.50">obrc`alloc..</text></g><g><title>obrc`alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (2,251 samples, 0.33%)</title><rect x="39.1512%" y="85" width="0.3265%" height="15" fill="rgb(251,118,11)" fg:x="269931" fg:w="2251"/><text x="39.4012%" y="95.50"></text></g><g><title>obrc`alloc::raw_vec::finish_grow (504 samples, 0.07%)</title><rect x="39.4777%" y="85" width="0.0731%" height="15" fill="rgb(217,147,25)" fg:x="272182" fg:w="504"/><text x="39.7277%" y="95.50"></text></g><g><title>obrc`alloc::raw_vec::handle_reserve (2,220 samples, 0.32%)</title><rect x="39.5508%" y="85" width="0.3220%" height="15" fill="rgb(247,81,37)" fg:x="272686" fg:w="2220"/><text x="39.8008%" y="95.50"></text></g><g><title>obrc`core::result::Result&lt;T,E&gt;::map_err (1,305 samples, 0.19%)</title><rect x="39.6835%" y="69" width="0.1893%" height="15" fill="rgb(209,12,38)" fg:x="273601" fg:w="1305"/><text x="39.9335%" y="79.50"></text></g><g><title>obrc`core::alloc::layout::Layout::array::inner (417 samples, 0.06%)</title><rect x="39.8728%" y="85" width="0.0605%" height="15" fill="rgb(227,1,9)" fg:x="274906" fg:w="417"/><text x="40.1228%" y="95.50"></text></g><g><title>obrc`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (73,222 samples, 10.62%)</title><rect x="29.3132%" y="133" width="10.6202%" height="15" fill="rgb(248,47,43)" fg:x="202102" fg:w="73222"/><text x="29.5632%" y="143.50">obrc`&lt;alloc::vec..</text></g><g><title>obrc`alloc::vec::Vec&lt;T,A&gt;::reserve (60,259 samples, 8.74%)</title><rect x="31.1933%" y="117" width="8.7401%" height="15" fill="rgb(221,10,30)" fg:x="215065" fg:w="60259"/><text x="31.4433%" y="127.50">obrc`alloc::..</text></g><g><title>obrc`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (58,132 samples, 8.43%)</title><rect x="31.5018%" y="101" width="8.4316%" height="15" fill="rgb(210,229,1)" fg:x="217192" fg:w="58132"/><text x="31.7518%" y="111.50">obrc`alloc::..</text></g><g><title>obrc`DYLD-STUB$$memcpy (233 samples, 0.03%)</title><rect x="39.9334%" y="133" width="0.0338%" height="15" fill="rgb(222,148,37)" fg:x="275324" fg:w="233"/><text x="40.1834%" y="143.50"></text></g><g><title>obrc`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (82,981 samples, 12.04%)</title><rect x="27.9317%" y="149" width="12.0357%" height="15" fill="rgb(234,67,33)" fg:x="192577" fg:w="82981"/><text x="28.1817%" y="159.50">obrc`alloc::vec::V..</text></g><g><title>obrc`std::io::read_until (118,358 samples, 17.17%)</title><rect x="22.8755%" y="165" width="17.1668%" height="15" fill="rgb(247,98,35)" fg:x="157717" fg:w="118358"/><text x="23.1255%" y="175.50">obrc`std::io::read_until</text></g><g><title>obrc`std::io::buffered::bufreader::buffer::Buffer::fill_buf (517 samples, 0.07%)</title><rect x="39.9673%" y="149" width="0.0750%" height="15" fill="rgb(247,138,52)" fg:x="275558" fg:w="517"/><text x="40.2173%" y="159.50"></text></g><g><title>obrc`std::io::BufRead::read_line::_{{closure}} (119,341 samples, 17.31%)</title><rect x="22.7998%" y="181" width="17.3094%" height="15" fill="rgb(213,79,30)" fg:x="157195" fg:w="119341"/><text x="23.0498%" y="191.50">obrc`std::io::BufRead::read..</text></g><g><title>obrc`std::sys::unix::memchr::memchr (461 samples, 0.07%)</title><rect x="40.0423%" y="165" width="0.0669%" height="15" fill="rgb(246,177,23)" fg:x="276075" fg:w="461"/><text x="40.2923%" y="175.50"></text></g><g><title>obrc`std::io::BufRead::read_line (143,913 samples, 20.87%)</title><rect x="19.3081%" y="213" width="20.8734%" height="15" fill="rgb(230,62,27)" fg:x="133121" fg:w="143913"/><text x="19.5581%" y="223.50">obrc`std::io::BufRead::read_line</text></g><g><title>obrc`std::io::append_to_string (136,305 samples, 19.77%)</title><rect x="20.4115%" y="197" width="19.7699%" height="15" fill="rgb(216,154,8)" fg:x="140729" fg:w="136305"/><text x="20.6615%" y="207.50">obrc`std::io::append_to_string</text></g><g><title>obrc`std::io::read_until (498 samples, 0.07%)</title><rect x="40.1092%" y="181" width="0.0722%" height="15" fill="rgb(244,35,45)" fg:x="276536" fg:w="498"/><text x="40.3592%" y="191.50"></text></g><g><title>obrc`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (241,437 samples, 35.02%)</title><rect x="5.1633%" y="229" width="35.0184%" height="15" fill="rgb(251,115,12)" fg:x="35599" fg:w="241437"/><text x="5.4133%" y="239.50">obrc`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::..</text></g><g><title>obrc`DYLD-STUB$$memcpy (479 samples, 0.07%)</title><rect x="40.1824%" y="229" width="0.0695%" height="15" fill="rgb(240,54,50)" fg:x="277041" fg:w="479"/><text x="40.4324%" y="239.50"></text></g><g><title>obrc`alloc::string::String::pop (232 samples, 0.03%)</title><rect x="40.2519%" y="229" width="0.0336%" height="15" fill="rgb(233,84,52)" fg:x="277520" fg:w="232"/><text x="40.5019%" y="239.50"></text></g><g><title>obrc`core::char::methods::encode_utf8_raw (525 samples, 0.08%)</title><rect x="40.2856%" y="229" width="0.0761%" height="15" fill="rgb(207,117,47)" fg:x="277752" fg:w="525"/><text x="40.5356%" y="239.50"></text></g><g><title>obrc`core::f64::_&lt;impl f64&gt;::max (381 samples, 0.06%)</title><rect x="40.3617%" y="229" width="0.0553%" height="15" fill="rgb(249,43,39)" fg:x="278277" fg:w="381"/><text x="40.6117%" y="239.50"></text></g><g><title>obrc`core::f64::_&lt;impl f64&gt;::min (332 samples, 0.05%)</title><rect x="40.4170%" y="229" width="0.0482%" height="15" fill="rgb(209,38,44)" fg:x="278658" fg:w="332"/><text x="40.6670%" y="239.50"></text></g><g><title>obrc`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (273 samples, 0.04%)</title><rect x="40.5001%" y="213" width="0.0396%" height="15" fill="rgb(236,212,23)" fg:x="279231" fg:w="273"/><text x="40.7501%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2,067 samples, 0.30%)</title><rect x="40.6193%" y="197" width="0.2998%" height="15" fill="rgb(242,79,21)" fg:x="280053" fg:w="2067"/><text x="40.8693%" y="207.50"></text></g><g><title>obrc`&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (2,522 samples, 0.37%)</title><rect x="40.9191%" y="197" width="0.3658%" height="15" fill="rgb(211,96,35)" fg:x="282120" fg:w="2522"/><text x="41.1691%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (906 samples, 0.13%)</title><rect x="41.3193%" y="181" width="0.1314%" height="15" fill="rgb(253,215,40)" fg:x="284879" fg:w="906"/><text x="41.5693%" y="191.50"></text></g><g><title>obrc`&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::haystack (379 samples, 0.05%)</title><rect x="43.3542%" y="117" width="0.0550%" height="15" fill="rgb(211,81,21)" fg:x="298909" fg:w="379"/><text x="43.6042%" y="127.50"></text></g><g><title>obrc`&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::haystack (221 samples, 0.03%)</title><rect x="43.9806%" y="101" width="0.0321%" height="15" fill="rgb(208,190,38)" fg:x="303228" fg:w="221"/><text x="44.2306%" y="111.50"></text></g><g><title>obrc`&lt;core::str::pattern::MatchOnly as core::str::pattern::TwoWayStrategy&gt;::rejecting (220 samples, 0.03%)</title><rect x="44.3817%" y="85" width="0.0319%" height="15" fill="rgb(235,213,38)" fg:x="305993" fg:w="220"/><text x="44.6317%" y="95.50"></text></g><g><title>obrc`&lt;core::str::pattern::MatchOnly as core::str::pattern::TwoWayStrategy&gt;::use_early_reject (832 samples, 0.12%)</title><rect x="44.4136%" y="85" width="0.1207%" height="15" fill="rgb(237,122,38)" fg:x="306213" fg:w="832"/><text x="44.6636%" y="95.50"></text></g><g><title>obrc`&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (24,274 samples, 3.52%)</title><rect x="44.0127%" y="101" width="3.5207%" height="15" fill="rgb(244,218,35)" fg:x="303449" fg:w="24274"/><text x="44.2627%" y="111.50">obr..</text></g><g><title>obrc`core::str::pattern::TwoWaySearcher::next (20,678 samples, 3.00%)</title><rect x="44.5343%" y="85" width="2.9992%" height="15" fill="rgb(240,68,47)" fg:x="307045" fg:w="20678"/><text x="44.7843%" y="95.50">obr..</text></g><g><title>obrc`core::str::iter::SplitInternal&lt;P&gt;::get_end (8,728 samples, 1.27%)</title><rect x="47.5334%" y="101" width="1.2659%" height="15" fill="rgb(210,16,53)" fg:x="327723" fg:w="8728"/><text x="47.7834%" y="111.50"></text></g><g><title>obrc`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (43,948 samples, 6.37%)</title><rect x="42.4873%" y="165" width="6.3743%" height="15" fill="rgb(235,124,12)" fg:x="292932" fg:w="43948"/><text x="42.7373%" y="175.50">obrc`&lt;al..</text></g><g><title>obrc`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (43,403 samples, 6.30%)</title><rect x="42.5663%" y="149" width="6.2952%" height="15" fill="rgb(224,169,11)" fg:x="293477" fg:w="43403"/><text x="42.8163%" y="159.50">obrc`all..</text></g><g><title>obrc`&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (38,913 samples, 5.64%)</title><rect x="43.2176%" y="133" width="5.6440%" height="15" fill="rgb(250,166,2)" fg:x="297967" fg:w="38913"/><text x="43.4676%" y="143.50">obrc`&lt;c..</text></g><g><title>obrc`core::str::iter::SplitInternal&lt;P&gt;::next (37,582 samples, 5.45%)</title><rect x="43.4106%" y="117" width="5.4509%" height="15" fill="rgb(242,216,29)" fg:x="299298" fg:w="37582"/><text x="43.6606%" y="127.50">obrc`co..</text></g><g><title>obrc`core::str::pattern::TwoWaySearcher::next (429 samples, 0.06%)</title><rect x="48.7993%" y="101" width="0.0622%" height="15" fill="rgb(230,116,27)" fg:x="336451" fg:w="429"/><text x="49.0493%" y="111.50"></text></g><g><title>obrc`&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::haystack (452 samples, 0.07%)</title><rect x="48.9339%" y="149" width="0.0656%" height="15" fill="rgb(228,99,48)" fg:x="337379" fg:w="452"/><text x="49.1839%" y="159.50"></text></g><g><title>obrc`&lt;core::str::pattern::MatchOnly as core::str::pattern::TwoWayStrategy&gt;::matching (530 samples, 0.08%)</title><rect x="51.2414%" y="117" width="0.0769%" height="15" fill="rgb(253,11,6)" fg:x="353288" fg:w="530"/><text x="51.4914%" y="127.50"></text></g><g><title>obrc`&lt;core::str::pattern::MatchOnly as core::str::pattern::TwoWayStrategy&gt;::use_early_reject (2,076 samples, 0.30%)</title><rect x="51.3183%" y="117" width="0.3011%" height="15" fill="rgb(247,143,39)" fg:x="353818" fg:w="2076"/><text x="51.5683%" y="127.50"></text></g><g><title>obrc`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (233 samples, 0.03%)</title><rect x="51.6194%" y="117" width="0.0338%" height="15" fill="rgb(236,97,10)" fg:x="355894" fg:w="233"/><text x="51.8694%" y="127.50"></text></g><g><title>obrc`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (961 samples, 0.14%)</title><rect x="57.8858%" y="101" width="0.1394%" height="15" fill="rgb(233,208,19)" fg:x="399098" fg:w="961"/><text x="58.1358%" y="111.50"></text></g><g><title>obrc`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (1,616 samples, 0.23%)</title><rect x="58.3149%" y="85" width="0.2344%" height="15" fill="rgb(216,164,2)" fg:x="402057" fg:w="1616"/><text x="58.5649%" y="95.50"></text></g><g><title>obrc`&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (54,614 samples, 7.92%)</title><rect x="50.7252%" y="133" width="7.9213%" height="15" fill="rgb(220,129,5)" fg:x="349729" fg:w="54614"/><text x="50.9752%" y="143.50">obrc`&lt;core:..</text></g><g><title>obrc`core::str::pattern::TwoWaySearcher::next (48,216 samples, 6.99%)</title><rect x="51.6532%" y="117" width="6.9933%" height="15" fill="rgb(242,17,10)" fg:x="356127" fg:w="48216"/><text x="51.9032%" y="127.50">obrc`core..</text></g><g><title>obrc`core::cmp::max_by (4,284 samples, 0.62%)</title><rect x="58.0251%" y="101" width="0.6214%" height="15" fill="rgb(242,107,0)" fg:x="400059" fg:w="4284"/><text x="58.2751%" y="111.50"></text></g><g><title>obrc`core::ops::function::FnOnce::call_once (670 samples, 0.10%)</title><rect x="58.5493%" y="85" width="0.0972%" height="15" fill="rgb(251,28,31)" fg:x="403673" fg:w="670"/><text x="58.7993%" y="95.50"></text></g><g><title>obrc`&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (67,859 samples, 9.84%)</title><rect x="48.8616%" y="165" width="9.8424%" height="15" fill="rgb(233,223,10)" fg:x="336880" fg:w="67859"/><text x="49.1116%" y="175.50">obrc`&lt;core::st..</text></g><g><title>obrc`core::str::iter::SplitInternal&lt;P&gt;::next (66,907 samples, 9.70%)</title><rect x="48.9996%" y="149" width="9.7043%" height="15" fill="rgb(215,21,27)" fg:x="337832" fg:w="66907"/><text x="49.2496%" y="159.50">obrc`core::str..</text></g><g><title>obrc`core::str::pattern::TwoWaySearcher::next (396 samples, 0.06%)</title><rect x="58.6465%" y="133" width="0.0574%" height="15" fill="rgb(232,23,21)" fg:x="404343" fg:w="396"/><text x="58.8965%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,491 samples, 0.22%)</title><rect x="59.8807%" y="133" width="0.2163%" height="15" fill="rgb(244,5,23)" fg:x="412852" fg:w="1491"/><text x="60.1307%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2,325 samples, 0.34%)</title><rect x="60.0979%" y="133" width="0.3372%" height="15" fill="rgb(226,81,46)" fg:x="414350" fg:w="2325"/><text x="60.3479%" y="143.50"></text></g><g><title>obrc`DYLD-STUB$$malloc (339 samples, 0.05%)</title><rect x="60.4352%" y="133" width="0.0492%" height="15" fill="rgb(247,70,30)" fg:x="416675" fg:w="339"/><text x="60.6852%" y="143.50"></text></g><g><title>obrc`__rdl_alloc (254 samples, 0.04%)</title><rect x="60.4843%" y="133" width="0.0368%" height="15" fill="rgb(212,68,19)" fg:x="417014" fg:w="254"/><text x="60.7343%" y="143.50"></text></g><g><title>obrc`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12,872 samples, 1.87%)</title><rect x="59.8071%" y="149" width="1.8670%" height="15" fill="rgb(240,187,13)" fg:x="412345" fg:w="12872"/><text x="60.0571%" y="159.50">o..</text></g><g><title>obrc`alloc::alloc::Global::alloc_impl (7,948 samples, 1.15%)</title><rect x="60.5213%" y="133" width="1.1528%" height="15" fill="rgb(223,113,26)" fg:x="417269" fg:w="7948"/><text x="60.7713%" y="143.50"></text></g><g><title>obrc`alloc::alloc::Global::alloc_impl (523 samples, 0.08%)</title><rect x="61.6741%" y="149" width="0.0759%" height="15" fill="rgb(206,192,2)" fg:x="425217" fg:w="523"/><text x="61.9241%" y="159.50"></text></g><g><title>obrc`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (26,017 samples, 3.77%)</title><rect x="58.7039%" y="165" width="3.7735%" height="15" fill="rgb(241,108,4)" fg:x="404739" fg:w="26017"/><text x="58.9539%" y="175.50">obrc..</text></g><g><title>obrc`core::alloc::layout::Layout::array::inner (5,016 samples, 0.73%)</title><rect x="61.7500%" y="149" width="0.7275%" height="15" fill="rgb(247,173,49)" fg:x="425740" fg:w="5016"/><text x="62.0000%" y="159.50"></text></g><g><title>obrc`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (1,647 samples, 0.24%)</title><rect x="63.3725%" y="149" width="0.2389%" height="15" fill="rgb(224,114,35)" fg:x="436927" fg:w="1647"/><text x="63.6225%" y="159.50"></text></g><g><title>obrc`core::cmp::max_by (8,572 samples, 1.24%)</title><rect x="62.4831%" y="165" width="1.2433%" height="15" fill="rgb(245,159,27)" fg:x="430795" fg:w="8572"/><text x="62.7331%" y="175.50"></text></g><g><title>obrc`core::ops::function::FnOnce::call_once (793 samples, 0.12%)</title><rect x="63.6114%" y="149" width="0.1150%" height="15" fill="rgb(245,172,44)" fg:x="438574" fg:w="793"/><text x="63.8614%" y="159.50"></text></g><g><title>obrc`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (153,583 samples, 22.28%)</title><rect x="41.4507%" y="181" width="22.2759%" height="15" fill="rgb(236,23,11)" fg:x="285785" fg:w="153583"/><text x="41.7007%" y="191.50">obrc`&lt;alloc::vec::Vec&lt;T&gt; as alloc::..</text></g><g><title>obrc`DYLD-STUB$$memcpy (253 samples, 0.04%)</title><rect x="63.7266%" y="181" width="0.0367%" height="15" fill="rgb(205,117,38)" fg:x="439368" fg:w="253"/><text x="63.9766%" y="191.50"></text></g><g><title>obrc`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,005 samples, 0.15%)</title><rect x="63.7633%" y="181" width="0.1458%" height="15" fill="rgb(237,72,25)" fg:x="439621" fg:w="1005"/><text x="64.0133%" y="191.50"></text></g><g><title>obrc`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (156,581 samples, 22.71%)</title><rect x="41.2849%" y="197" width="22.7107%" height="15" fill="rgb(244,70,9)" fg:x="284642" fg:w="156581"/><text x="41.5349%" y="207.50">obrc`&lt;alloc::vec::Vec&lt;T&gt; as alloc::v..</text></g><g><title>obrc`core::iter::traits::iterator::Iterator::size_hint (595 samples, 0.09%)</title><rect x="63.9093%" y="181" width="0.0863%" height="15" fill="rgb(217,125,39)" fg:x="440628" fg:w="595"/><text x="64.1593%" y="191.50"></text></g><g><title>obrc`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (472 samples, 0.07%)</title><rect x="63.9956%" y="197" width="0.0685%" height="15" fill="rgb(235,36,10)" fg:x="441223" fg:w="472"/><text x="64.2456%" y="207.50"></text></g><g><title>obrc`core::iter::traits::iterator::Iterator::collect (162,983 samples, 23.64%)</title><rect x="40.4651%" y="229" width="23.6393%" height="15" fill="rgb(251,123,47)" fg:x="278990" fg:w="162983"/><text x="40.7151%" y="239.50">obrc`core::iter::traits::iterator::Ite..</text></g><g><title>obrc`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (162,469 samples, 23.56%)</title><rect x="40.5397%" y="213" width="23.5647%" height="15" fill="rgb(221,13,13)" fg:x="279504" fg:w="162469"/><text x="40.7897%" y="223.50">obrc`&lt;alloc::vec::Vec&lt;T&gt; as core::ite..</text></g><g><title>obrc`DYLD-STUB$$memcpy (278 samples, 0.04%)</title><rect x="64.0641%" y="197" width="0.0403%" height="15" fill="rgb(238,131,9)" fg:x="441695" fg:w="278"/><text x="64.3141%" y="207.50"></text></g><g><title>obrc`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (932 samples, 0.14%)</title><rect x="64.1044%" y="229" width="0.1352%" height="15" fill="rgb(211,50,8)" fg:x="441973" fg:w="932"/><text x="64.3544%" y="239.50"></text></g><g><title>obrc`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,814 samples, 0.70%)</title><rect x="64.3197%" y="213" width="0.6982%" height="15" fill="rgb(245,182,24)" fg:x="443457" fg:w="4814"/><text x="64.5697%" y="223.50"></text></g><g><title>obrc`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (205 samples, 0.03%)</title><rect x="65.2312%" y="181" width="0.0297%" height="15" fill="rgb(242,14,37)" fg:x="449742" fg:w="205"/><text x="65.4812%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (456 samples, 0.07%)</title><rect x="65.4468%" y="165" width="0.0661%" height="15" fill="rgb(246,228,12)" fg:x="451228" fg:w="456"/><text x="65.6968%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1,743 samples, 0.25%)</title><rect x="65.5129%" y="165" width="0.2528%" height="15" fill="rgb(213,55,15)" fg:x="451684" fg:w="1743"/><text x="65.7629%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (74 samples, 0.01%)</title><rect x="65.9206%" y="149" width="0.0107%" height="15" fill="rgb(209,9,3)" fg:x="454495" fg:w="74"/><text x="66.1706%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3,951 samples, 0.57%)</title><rect x="65.9314%" y="149" width="0.5731%" height="15" fill="rgb(230,59,30)" fg:x="454569" fg:w="3951"/><text x="66.1814%" y="159.50"></text></g><g><title>obrc`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5,309 samples, 0.77%)</title><rect x="65.7657%" y="165" width="0.7700%" height="15" fill="rgb(209,121,21)" fg:x="453427" fg:w="5309"/><text x="66.0157%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (180 samples, 0.03%)</title><rect x="66.5096%" y="149" width="0.0261%" height="15" fill="rgb(220,109,13)" fg:x="458556" fg:w="180"/><text x="66.7596%" y="159.50"></text></g><g><title>obrc`DYLD-STUB$$free (405 samples, 0.06%)</title><rect x="66.5357%" y="165" width="0.0587%" height="15" fill="rgb(232,18,1)" fg:x="458736" fg:w="405"/><text x="66.7857%" y="175.50"></text></g><g><title>obrc`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,207 samples, 1.34%)</title><rect x="65.2610%" y="181" width="1.3354%" height="15" fill="rgb(215,41,42)" fg:x="449947" fg:w="9207"/><text x="65.5110%" y="191.50"></text></g><g><title>obrc`core::ptr::drop_in_place&lt;alloc::string::String&gt; (24,951 samples, 3.62%)</title><rect x="64.2454%" y="229" width="3.6189%" height="15" fill="rgb(224,123,36)" fg:x="442945" fg:w="24951"/><text x="64.4954%" y="239.50">obrc..</text></g><g><title>obrc`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (19,625 samples, 2.85%)</title><rect x="65.0179%" y="213" width="2.8464%" height="15" fill="rgb(240,125,3)" fg:x="448271" fg:w="19625"/><text x="65.2679%" y="223.50">ob..</text></g><g><title>obrc`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (18,627 samples, 2.70%)</title><rect x="65.1626%" y="197" width="2.7017%" height="15" fill="rgb(205,98,50)" fg:x="449269" fg:w="18627"/><text x="65.4126%" y="207.50">ob..</text></g><g><title>obrc`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (8,742 samples, 1.27%)</title><rect x="66.5964%" y="181" width="1.2680%" height="15" fill="rgb(205,185,37)" fg:x="459154" fg:w="8742"/><text x="66.8464%" y="191.50"></text></g><g><title>obrc`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (219 samples, 0.03%)</title><rect x="68.1097%" y="197" width="0.0318%" height="15" fill="rgb(238,207,15)" fg:x="469588" fg:w="219"/><text x="68.3597%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (583 samples, 0.08%)</title><rect x="68.4197%" y="181" width="0.0846%" height="15" fill="rgb(213,199,42)" fg:x="471725" fg:w="583"/><text x="68.6697%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1,786 samples, 0.26%)</title><rect x="68.5042%" y="181" width="0.2590%" height="15" fill="rgb(235,201,11)" fg:x="472308" fg:w="1786"/><text x="68.7542%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (263 samples, 0.04%)</title><rect x="68.9822%" y="165" width="0.0381%" height="15" fill="rgb(207,46,11)" fg:x="475603" fg:w="263"/><text x="69.2322%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3,225 samples, 0.47%)</title><rect x="69.0203%" y="165" width="0.4678%" height="15" fill="rgb(241,35,35)" fg:x="475866" fg:w="3225"/><text x="69.2703%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (211 samples, 0.03%)</title><rect x="69.4881%" y="165" width="0.0306%" height="15" fill="rgb(243,32,47)" fg:x="479091" fg:w="211"/><text x="69.7381%" y="175.50"></text></g><g><title>obrc`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,201 samples, 0.90%)</title><rect x="68.7636%" y="181" width="0.8994%" height="15" fill="rgb(247,202,23)" fg:x="474096" fg:w="6201"/><text x="69.0136%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (995 samples, 0.14%)</title><rect x="69.5187%" y="165" width="0.1443%" height="15" fill="rgb(219,102,11)" fg:x="479302" fg:w="995"/><text x="69.7687%" y="175.50"></text></g><g><title>obrc`DYLD-STUB$$free (348 samples, 0.05%)</title><rect x="69.6630%" y="181" width="0.0505%" height="15" fill="rgb(243,110,44)" fg:x="480297" fg:w="348"/><text x="69.9130%" y="191.50"></text></g><g><title>obrc`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10,857 samples, 1.57%)</title><rect x="68.1415%" y="197" width="1.5747%" height="15" fill="rgb(222,74,54)" fg:x="469807" fg:w="10857"/><text x="68.3915%" y="207.50"></text></g><g><title>obrc`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;&amp;str&gt;&gt; (18,827 samples, 2.73%)</title><rect x="67.8643%" y="229" width="2.7307%" height="15" fill="rgb(216,99,12)" fg:x="467896" fg:w="18827"/><text x="68.1143%" y="239.50">ob..</text></g><g><title>obrc`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;&amp;str&gt;&gt; (17,607 samples, 2.55%)</title><rect x="68.0413%" y="213" width="2.5537%" height="15" fill="rgb(226,22,26)" fg:x="469116" fg:w="17607"/><text x="68.2913%" y="223.50">ob..</text></g><g><title>obrc`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (6,059 samples, 0.88%)</title><rect x="69.7162%" y="197" width="0.8788%" height="15" fill="rgb(217,163,10)" fg:x="480664" fg:w="6059"/><text x="69.9662%" y="207.50"></text></g><g><title>obrc`core::result::Result&lt;T,E&gt;::unwrap (1,349 samples, 0.20%)</title><rect x="70.6042%" y="229" width="0.1957%" height="15" fill="rgb(213,25,53)" fg:x="486786" fg:w="1349"/><text x="70.8542%" y="239.50"></text></g><g><title>obrc`core::slice::_&lt;impl [T]&gt;::ends_with (894 samples, 0.13%)</title><rect x="70.7998%" y="229" width="0.1297%" height="15" fill="rgb(252,105,26)" fg:x="488135" fg:w="894"/><text x="71.0498%" y="239.50"></text></g><g><title>obrc`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (5,470 samples, 0.79%)</title><rect x="71.0027%" y="213" width="0.7934%" height="15" fill="rgb(220,39,43)" fg:x="489534" fg:w="5470"/><text x="71.2527%" y="223.50"></text></g><g><title>obrc`core::num::dec2flt::parse::parse_number (3,932 samples, 0.57%)</title><rect x="71.2258%" y="197" width="0.5703%" height="15" fill="rgb(229,68,48)" fg:x="491072" fg:w="3932"/><text x="71.4758%" y="207.50"></text></g><g><title>obrc`core::str::_&lt;impl str&gt;::parse (6,192 samples, 0.90%)</title><rect x="70.9295%" y="229" width="0.8981%" height="15" fill="rgb(252,8,32)" fg:x="489029" fg:w="6192"/><text x="71.1795%" y="239.50"></text></g><g><title>obrc`core::num::dec2flt::parse::parse_number (217 samples, 0.03%)</title><rect x="71.7961%" y="213" width="0.0315%" height="15" fill="rgb(223,20,43)" fg:x="495004" fg:w="217"/><text x="72.0461%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (665 samples, 0.10%)</title><rect x="72.6136%" y="197" width="0.0965%" height="15" fill="rgb(229,81,49)" fg:x="500640" fg:w="665"/><text x="72.8636%" y="207.50"></text></g><g><title>obrc`DYLD-STUB$$memcmp (291 samples, 0.04%)</title><rect x="72.7100%" y="197" width="0.0422%" height="15" fill="rgb(236,28,36)" fg:x="501305" fg:w="291"/><text x="72.9600%" y="207.50"></text></g><g><title>obrc`&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (6,065 samples, 0.88%)</title><rect x="72.2257%" y="213" width="0.8797%" height="15" fill="rgb(249,185,26)" fg:x="497966" fg:w="6065"/><text x="72.4757%" y="223.50"></text></g><g><title>obrc`core::str::pattern::StrSearcher::new (2,435 samples, 0.35%)</title><rect x="72.7522%" y="197" width="0.3532%" height="15" fill="rgb(249,174,33)" fg:x="501596" fg:w="2435"/><text x="73.0022%" y="207.50"></text></g><g><title>obrc`core::str::_&lt;impl str&gt;::split (9,618 samples, 1.40%)</title><rect x="71.8276%" y="229" width="1.3950%" height="15" fill="rgb(233,201,37)" fg:x="495221" fg:w="9618"/><text x="72.0776%" y="239.50"></text></g><g><title>obrc`core::str::pattern::StrSearcher::new (808 samples, 0.12%)</title><rect x="73.1054%" y="213" width="0.1172%" height="15" fill="rgb(221,78,26)" fg:x="504031" fg:w="808"/><text x="73.3554%" y="223.50"></text></g><g><title>obrc`obrc::baseline::Stats::update (1,758 samples, 0.25%)</title><rect x="73.2237%" y="229" width="0.2550%" height="15" fill="rgb(250,127,30)" fg:x="504847" fg:w="1758"/><text x="73.4737%" y="239.50"></text></g><g><title>obrc`core::hash::BuildHasher::hash_one (219 samples, 0.03%)</title><rect x="73.5820%" y="213" width="0.0318%" height="15" fill="rgb(230,49,44)" fg:x="507317" fg:w="219"/><text x="73.8320%" y="223.50"></text></g><g><title>obrc`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (215 samples, 0.03%)</title><rect x="73.9155%" y="197" width="0.0312%" height="15" fill="rgb(229,67,23)" fg:x="509616" fg:w="215"/><text x="74.1655%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6,524 samples, 0.95%)</title><rect x="74.1891%" y="181" width="0.9463%" height="15" fill="rgb(249,83,47)" fg:x="511503" fg:w="6524"/><text x="74.4391%" y="191.50"></text></g><g><title>obrc`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (109 samples, 0.02%)</title><rect x="75.1354%" y="181" width="0.0158%" height="15" fill="rgb(215,43,3)" fg:x="518027" fg:w="109"/><text x="75.3854%" y="191.50"></text></g><g><title>obrc`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,982 samples, 0.29%)</title><rect x="75.2156%" y="165" width="0.2875%" height="15" fill="rgb(238,154,13)" fg:x="518580" fg:w="1982"/><text x="75.4656%" y="175.50"></text></g><g><title>obrc`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (11,237 samples, 1.63%)</title><rect x="75.5031%" y="165" width="1.6298%" height="15" fill="rgb(219,56,2)" fg:x="520562" fg:w="11237"/><text x="75.7531%" y="175.50"></text></g><g><title>obrc`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (43,028 samples, 6.24%)</title><rect x="75.1512%" y="181" width="6.2408%" height="15" fill="rgb(233,0,4)" fg:x="518136" fg:w="43028"/><text x="75.4012%" y="191.50">obrc`&lt;st..</text></g><g><title>obrc`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (29,365 samples, 4.26%)</title><rect x="77.1329%" y="165" width="4.2591%" height="15" fill="rgb(235,30,7)" fg:x="531799" fg:w="29365"/><text x="77.3829%" y="175.50">obrc`..</text></g><g><title>obrc`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (9,740 samples, 1.41%)</title><rect x="81.3920%" y="181" width="1.4127%" height="15" fill="rgb(250,79,13)" fg:x="561164" fg:w="9740"/><text x="81.6420%" y="191.50"></text></g><g><title>obrc`DYLD-STUB$$memcpy (696 samples, 0.10%)</title><rect x="82.8048%" y="181" width="0.1009%" height="15" fill="rgb(211,146,34)" fg:x="570904" fg:w="696"/><text x="83.0548%" y="191.50"></text></g><g><title>obrc`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (1,531 samples, 0.22%)</title><rect x="86.1977%" y="101" width="0.2221%" height="15" fill="rgb(228,22,38)" fg:x="594297" fg:w="1531"/><text x="86.4477%" y="111.50"></text></g><g><title>obrc`core::cmp::min_by (7,010 samples, 1.02%)</title><rect x="85.5759%" y="117" width="1.0167%" height="15" fill="rgb(235,168,5)" fg:x="590010" fg:w="7010"/><text x="85.8259%" y="127.50"></text></g><g><title>obrc`core::ops::function::FnOnce::call_once (1,192 samples, 0.17%)</title><rect x="86.4198%" y="101" width="0.1729%" height="15" fill="rgb(221,155,16)" fg:x="595828" fg:w="1192"/><text x="86.6698%" y="111.50"></text></g><g><title>obrc`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21,779 samples, 3.16%)</title><rect x="83.4368%" y="133" width="3.1589%" height="15" fill="rgb(215,215,53)" fg:x="575262" fg:w="21779"/><text x="83.6868%" y="143.50">obr..</text></g><g><title>obrc`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5,290 samples, 0.77%)</title><rect x="86.5957%" y="133" width="0.7673%" height="15" fill="rgb(223,4,10)" fg:x="597041" fg:w="5290"/><text x="86.8457%" y="143.50"></text></g><g><title>obrc`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (42,932 samples, 6.23%)</title><rect x="82.9057%" y="181" width="6.2269%" height="15" fill="rgb(234,103,6)" fg:x="571600" fg:w="42932"/><text x="83.1557%" y="191.50">obrc`cor..</text></g><g><title>obrc`core::hash::impls::_&lt;impl core::hash::Hash for str&gt;::hash (42,397 samples, 6.15%)</title><rect x="82.9833%" y="165" width="6.1493%" height="15" fill="rgb(227,97,0)" fg:x="572135" fg:w="42397"/><text x="83.2333%" y="175.50">obrc`cor..</text></g><g><title>obrc`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (40,170 samples, 5.83%)</title><rect x="83.3063%" y="149" width="5.8263%" height="15" fill="rgb(234,150,53)" fg:x="574362" fg:w="40170"/><text x="83.5563%" y="159.50">obrc`&lt;s..</text></g><g><title>obrc`core::hash::sip::u8to64_le (12,201 samples, 1.77%)</title><rect x="87.3630%" y="133" width="1.7697%" height="15" fill="rgb(228,201,54)" fg:x="602331" fg:w="12201"/><text x="87.6130%" y="143.50"></text></g><g><title>obrc`core::hash::BuildHasher::hash_one (104,710 samples, 15.19%)</title><rect x="73.9466%" y="197" width="15.1873%" height="15" fill="rgb(222,22,37)" fg:x="509831" fg:w="104710"/><text x="74.1966%" y="207.50">obrc`core::hash::BuildH..</text></g><g><title>obrc`hashbrown::raw::RawTable&lt;T,A&gt;::find (548 samples, 0.08%)</title><rect x="89.1344%" y="197" width="0.0795%" height="15" fill="rgb(237,53,32)" fg:x="614544" fg:w="548"/><text x="89.3844%" y="207.50"></text></g><g><title>obrc`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (6,790 samples, 0.98%)</title><rect x="89.6129%" y="181" width="0.9848%" height="15" fill="rgb(233,25,53)" fg:x="617843" fg:w="6790"/><text x="89.8629%" y="191.50"></text></g><g><title>obrc`core::core_arch::aarch64::neon::vld1_u8 (4,459 samples, 0.65%)</title><rect x="90.5977%" y="181" width="0.6467%" height="15" fill="rgb(210,40,34)" fg:x="624633" fg:w="4459"/><text x="90.8477%" y="191.50"></text></g><g><title>obrc`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1,428 samples, 0.21%)</title><rect x="91.2444%" y="181" width="0.2071%" height="15" fill="rgb(241,220,44)" fg:x="629092" fg:w="1428"/><text x="91.4944%" y="191.50"></text></g><g><title>obrc`hashbrown::raw::RawTable&lt;T,A&gt;::find (10,986 samples, 1.59%)</title><rect x="91.4515%" y="181" width="1.5934%" height="15" fill="rgb(235,28,35)" fg:x="630520" fg:w="10986"/><text x="91.7015%" y="191.50"></text></g><g><title>obrc`core::core_arch::arm_shared::neon::generated::vceq_u8 (2,722 samples, 0.39%)</title><rect x="93.0471%" y="165" width="0.3948%" height="15" fill="rgb(210,56,17)" fg:x="641521" fg:w="2722"/><text x="93.2971%" y="175.50"></text></g><g><title>obrc`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (454 samples, 0.07%)</title><rect x="93.4420%" y="165" width="0.0658%" height="15" fill="rgb(224,130,29)" fg:x="644243" fg:w="454"/><text x="93.6920%" y="175.50"></text></g><g><title>obrc`core::core_arch::arm_shared::neon::vdup_n_u8 (683 samples, 0.10%)</title><rect x="93.5078%" y="165" width="0.0991%" height="15" fill="rgb(235,212,8)" fg:x="644697" fg:w="683"/><text x="93.7578%" y="175.50"></text></g><g><title>obrc`core::core_arch::arm_shared::neon::vget_lane_u64 (702 samples, 0.10%)</title><rect x="93.6069%" y="165" width="0.1018%" height="15" fill="rgb(223,33,50)" fg:x="645380" fg:w="702"/><text x="93.8569%" y="175.50"></text></g><g><title>obrc`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (3,646 samples, 0.53%)</title><rect x="93.7093%" y="165" width="0.5288%" height="15" fill="rgb(219,149,13)" fg:x="646086" fg:w="3646"/><text x="93.9593%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (4,779 samples, 0.69%)</title><rect x="96.0988%" y="101" width="0.6932%" height="15" fill="rgb(250,156,29)" fg:x="662561" fg:w="4779"/><text x="96.3488%" y="111.50"></text></g><g><title>obrc`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,628 samples, 0.38%)</title><rect x="96.7920%" y="101" width="0.3812%" height="15" fill="rgb(216,193,19)" fg:x="667340" fg:w="2628"/><text x="97.0420%" y="111.50"></text></g><g><title>obrc`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (12,023 samples, 1.74%)</title><rect x="95.4704%" y="133" width="1.7438%" height="15" fill="rgb(216,135,14)" fg:x="658228" fg:w="12023"/><text x="95.7204%" y="143.50"></text></g><g><title>obrc`core::str::traits::_&lt;impl core::cmp::PartialEq for str&gt;::eq (10,476 samples, 1.52%)</title><rect x="95.6947%" y="117" width="1.5195%" height="15" fill="rgb(241,47,5)" fg:x="659775" fg:w="10476"/><text x="95.9447%" y="127.50"></text></g><g><title>obrc`DYLD-STUB$$memcmp (283 samples, 0.04%)</title><rect x="97.1731%" y="101" width="0.0410%" height="15" fill="rgb(233,42,35)" fg:x="669968" fg:w="283"/><text x="97.4231%" y="111.50"></text></g><g><title>obrc`alloc::str::_&lt;impl core::borrow::Borrow&lt;str&gt; for alloc::string::String&gt;::borrow (13,856 samples, 2.01%)</title><rect x="97.2142%" y="133" width="2.0097%" height="15" fill="rgb(231,13,6)" fg:x="670251" fg:w="13856"/><text x="97.4642%" y="143.50">o..</text></g><g><title>obrc`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (34,385 samples, 4.99%)</title><rect x="94.2381%" y="165" width="4.9873%" height="15" fill="rgb(207,181,40)" fg:x="649732" fg:w="34385"/><text x="94.4881%" y="175.50">obrc`h..</text></g><g><title>obrc`hashbrown::map::equivalent_key::_{{closure}} (27,695 samples, 4.02%)</title><rect x="95.2084%" y="149" width="4.0169%" height="15" fill="rgb(254,173,49)" fg:x="656422" fg:w="27695"/><text x="95.4584%" y="159.50">obrc..</text></g><g><title>obrc`hashbrown::raw::RawTable&lt;T,A&gt;::find (47,902 samples, 6.95%)</title><rect x="93.0471%" y="181" width="6.9478%" height="15" fill="rgb(221,1,38)" fg:x="641521" fg:w="47902"/><text x="93.2971%" y="191.50">obrc`hash..</text></g><g><title>obrc`hashbrown::raw::neon::Group::match_byte (5,306 samples, 0.77%)</title><rect x="99.2253%" y="165" width="0.7696%" height="15" fill="rgb(206,124,46)" fg:x="684117" fg:w="5306"/><text x="99.4753%" y="175.50"></text></g><g><title>obrc`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (181,902 samples, 26.38%)</title><rect x="73.6138%" y="213" width="26.3833%" height="15" fill="rgb(249,21,11)" fg:x="507536" fg:w="181902"/><text x="73.8638%" y="223.50">obrc`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get..</text></g><g><title>obrc`hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (74,346 samples, 10.78%)</title><rect x="89.2138%" y="197" width="10.7833%" height="15" fill="rgb(222,201,40)" fg:x="615092" fg:w="74346"/><text x="89.4638%" y="207.50">obrc`hashbrown::..</text></g><g><title>obrc`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (182,839 samples, 26.52%)</title><rect x="73.4787%" y="229" width="26.5192%" height="15" fill="rgb(235,61,29)" fg:x="506605" fg:w="182839"/><text x="73.7287%" y="239.50">obrc`std::collections::hash::map::HashMap&lt;..</text></g><g><title>obrc`obrc::baseline::run (686,578 samples, 99.58%)</title><rect x="0.4161%" y="245" width="99.5823%" height="15" fill="rgb(219,207,3)" fg:x="2869" fg:w="686578"/><text x="0.6661%" y="255.50">obrc`obrc::baseline::run</text></g><g><title>dyld`start (689,457 samples, 100.00%)</title><rect x="0.0000%" y="373" width="99.9999%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="689457"/><text x="0.2500%" y="383.50">dyld`start</text></g><g><title>obrc`main (689,457 samples, 100.00%)</title><rect x="0.0000%" y="357" width="99.9999%" height="15" fill="rgb(239,76,54)" fg:x="0" fg:w="689457"/><text x="0.2500%" y="367.50">obrc`main</text></g><g><title>obrc`std::rt::lang_start (689,457 samples, 100.00%)</title><rect x="0.0000%" y="341" width="99.9999%" height="15" fill="rgb(231,124,27)" fg:x="0" fg:w="689457"/><text x="0.2500%" y="351.50">obrc`std::rt::lang_start</text></g><g><title>obrc`std::rt::lang_start_internal (689,457 samples, 100.00%)</title><rect x="0.0000%" y="325" width="99.9999%" height="15" fill="rgb(249,195,6)" fg:x="0" fg:w="689457"/><text x="0.2500%" y="335.50">obrc`std::rt::lang_start_internal</text></g><g><title>obrc`std::rt::lang_start::_{{closure}} (689,456 samples, 100.00%)</title><rect x="0.0001%" y="309" width="99.9997%" height="15" fill="rgb(237,174,47)" fg:x="1" fg:w="689456"/><text x="0.2501%" y="319.50">obrc`std::rt::lang_start::_{{closure}}</text></g><g><title>obrc`std::sys_common::backtrace::__rust_begin_short_backtrace (689,456 samples, 100.00%)</title><rect x="0.0001%" y="293" width="99.9997%" height="15" fill="rgb(206,201,31)" fg:x="1" fg:w="689456"/><text x="0.2501%" y="303.50">obrc`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>obrc`core::ops::function::FnOnce::call_once (689,456 samples, 100.00%)</title><rect x="0.0001%" y="277" width="99.9997%" height="15" fill="rgb(231,57,52)" fg:x="1" fg:w="689456"/><text x="0.2501%" y="287.50">obrc`core::ops::function::FnOnce::call_once</text></g><g><title>obrc`obrc::main (689,456 samples, 100.00%)</title><rect x="0.0001%" y="261" width="99.9997%" height="15" fill="rgb(248,177,22)" fg:x="1" fg:w="689456"/><text x="0.2501%" y="271.50">obrc`obrc::main</text></g><g><title>all (689,458 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(215,211,37)" fg:x="0" fg:w="689458"/><text x="0.2500%" y="399.50"></text></g></svg></svg>